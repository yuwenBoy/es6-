let和const命令
1、let命令
2、块级作用域
3、const命令
4、顶级对象的属性
5、global对象

1、let命令

基本用法

ES6 新增了let命令，用来声明变量。它的用法类似于var，但是所声明的变量，只在
let命令所在的代码块内有效。
{
    let a =10;
    var b=1;
}
a //Uncaught ReferenceError: a is not defined
b // 1

上面代码在代码块之中，分别用let和var声明了两个变量。然后再代码块之外调用这两个变量，
结果let声明的变量报错，var声明的变量返回了正确的值。这表明，let声明的变量只再它所在的
代码块内有效。
for循环的计数器，就很适合使用let命令
for (let i =0;i< 10;i++){
    //...
}
console.log(i);
// Uncaught ReferenceError: i is not defined

上面代码中，计数器i只在for循环体内有效，在循环体外引用会报错。

不存在变量提升
var 命令会发生”变量提升“现象，即变量可以在声明之前使用，值为undefined。这种
现象多少是有些奇怪的，按照一般的逻辑，变量应该在声明语句之后才可以使用。

为了纠正这种现象，let命令改变了语法行为，它所声明的变量一定要在声明后使用，否则报错。


暂时性死区
只要块级作用域内存在let命令，它所声明的变量就"绑定"这个区域，不再受外部的影响。
var temp=123;
 if(true) {
     temp='abc'; // 报错
     let temp;
 } 

 上面代码中，存在全局变量temp，但是块级作用域内let又声明了一个局部变量temp，
 导致后者绑定这个块级作用域，所以在let声明变前，对temp赋值会报错。

 es6明确规定，如果区块中存在let和const命令，这个区块对这些命令声明的变量，从
 一开始就形成了封闭作用域。凡是在声明之前就使用这些变量，就会报错。

 总之，在代码块内，使用let命令声明变量之前，该变量都是不可用的。这在语法上，称
 为"暂时性死区"（temporal dead zone，简称 TDZ）。

 if(true){
     temp ='abcd';// 报错，TDZ
     console.log(temp);

     let temp; // TDZ结束
     console.log(temp) // undefined

     temp=123;
     console.log(temp)// 123
 }